#include<iostream>
using namespace std;

#define Max 5
struct Box
{
	int h, w, d;  //always keep w <= d for simplicity
};
Box arr[] = { { 4, 6, 7 },{ 1, 2, 3 },{ 4, 5, 6 },{ 10, 12, 32 } };
int n = sizeof(arr) / sizeof(arr[0]);
Box rot[3 * Max];
int msh[Max];


int min(int x, int y)
{
	return (x < y) ? x : y;
}
int max(int x, int y)
{
	return (x > y) ? x : y;
}
int compare(const void *a, const void * b)
{
	int x = ((*(Box *)b).d * (*(Box *)b).w);
	int y = ((*(Box *)a).d * (*(Box *)a).w);
	return x-y;
}
int maxStackHeight() 
{
	int index = 0;
	for (int i = 0; i < n; i++)
	{
		rot[index] = arr[i];
		index++;
		// First rotation of box
		rot[index].h = arr[i].w;
		rot[index].d = max(arr[i].h, arr[i].d);
		rot[index].w = min(arr[i].h, arr[i].d);
		index++;
		// Second rotation of box
		rot[index].h = arr[i].d;
		rot[index].d = max(arr[i].h, arr[i].w);
		rot[index].w = min(arr[i].h, arr[i].w);
		index++;
	}
	n = 3 * n;
	qsort(rot, n, sizeof(rot[0]), compare);

	for (int i = 0; i < n; i++)
		msh[i] = rot[i].h;

	for (int i = 1; i < n; i++)
		for (int j = 0; j < i; j++)
			if (rot[i].w < rot[j].w &&
				rot[i].d < rot[j].d &&
				msh[i] < msh[j] + rot[i].h)
			{
				msh[i] = msh[j] + rot[i].h;
			}
	int max = -1;
	for (int i = 0; i < n; i++)
		if (max < msh[i])
			max = msh[i];
	return max;
}
int main()
{
	cout<<"The max height of stack is: "<< maxStackHeight();
	return 0;
}
//l w h
//1 2 4
//3 2 5

//5 3 2
//5 2 3
//4 2 1
//3 2 5
//4 1 2
//2 1 4

//2 3 3 7 5 11
