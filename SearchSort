#include <iostream>
using namespace std;
#define MAX 10

void swapNum(int &a, int &b){
	int temp = a;a = b; b = temp;
}
void print(int a[], int n){
	for (int i = 0; i<n; i++)
		cout << a[i] << " ";
	cout << endl;
}
int binarySearch(int a[], int l, int r, int x){
	while (l <= r){
		int m = l + (r - l) / 2;
		if (a[m] > x)r = m - 1;
		else if (a[m] < x)l = m + 1;
		else return m;
	}
	return -1;
}
void bubbleSort(int a[], int n){
	for (int i = 0; i < n - 1 ; i++)
		for (int j = 0; j < n - 1 - i; j++){
			if (a[j]>a[j + 1])
				swapNum(a[j], a[j + 1]);
		}
}
void selectionSort(int a[], int n){
	for (int i = 0; i < n - 1; i++)
	{
		int min = i;
		for (int j = i + 1; j <n; j++){
			if (a[j] < a[min])
				min = j;
		}
		swapNum(a[i], a[min]);
	}
}
void merge(int a[], int l, int m, int r){
	int s1 = m -l + 1;
	int s2 = r - m;
	int L[MAX],R[MAX];
	for (int i = 0; i < s1; i++)
		L[i] = a[l + i];
	for (int j = 0; j < s2; j++)
		R[j] = a[m + 1 + j];

	int i = 0, j = 0, k = l;
	while ((i < s1) && (j < s2))
	{
		if (L[i] < R[j])
			a[k++] = L[i++];
		else
			a[k++] = R[j++];
	}
	while (i<s1)
		a[k++] = L[i++];
	while (j<s2)
		a[k++] = R[j++];
}
void mergeSort(int a[], int l, int r){
	if (l < r){
		int m = l + (r - l) / 2;
		mergeSort(a, l, m);
		mergeSort(a, m + 1, r);
		merge(a, l, m, r);
	}
}
void heapify(int a[], int i, int n){
	int l = 2 * i;
	int r = 2 * i + 1;
	int largest;
	if ((l <= n) && (a[l] > a[i]))
		largest = l;
	else
		largest = i;
	if ((r <= n) && (a[r] > a[largest]))
		largest = r;
	if (largest != i)
	{
		swapNum(a[largest], a[i]);
		heapify(a, largest, n);
	}
}
void buildMaxHeap(int a[], int n){
	for (int k = n / 2; k >= 1; k--){
		heapify(a, k, n);
	}
}
void heapSort(int a[], int n){
	buildMaxHeap(a, n);
	for (int i = n; i >= 2; i--){
		swapNum(a[1], a[i]);
		heapify(a, 1, i-1);
	}
}
int partition(int a[], int l, int h){
	int pivot = a[l];
	int i = l, j = h;
	while (i < j){
		while ((i < h) && (a[i] <= pivot))
			i++;
		while (a[j] > pivot)
			j--;
		if (i < j)
			swapNum(a[i], a[j]);
	}
	swapNum(a[l], a[j]);
	return j;
}
void quickSort(int a[], int l, int h)
{
	if (l < h){
		int p = partition(a, l, h);
		quickSort(a, l, p - 1);
		quickSort(a, p + 1, h);
	}
}
int main(){

	int bin[MAX] = { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9 };
	cout << "binarySearch: " << binarySearch(bin, 0, MAX-1, 99) << endl;

	int bub[MAX] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	bubbleSort(bub, MAX);
	print(bub, MAX);

	int sel[MAX] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	selectionSort(sel, MAX);
	print(bub, MAX);

	int mer[MAX] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	mergeSort(mer, 0,MAX-1);
	print(mer, MAX);

	int heap[MAX+1] = {0, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	heapSort(heap, MAX);
	print(heap, MAX+1);

	int quic[MAX] = { 9, 8, 7, 6, 5, 4, 3, 2, 1, 0 };
	quickSort(quic, 0, MAX - 1);
	print(quic, MAX);
	return 0;
}
