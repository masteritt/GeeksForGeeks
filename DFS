#include <iostream>
using namespace std;
#define MAX 5
int a[MAX][MAX];
int visited[MAX];
int N;

class Stack{
	int a[MAX];
	int tos;
public:
	Stack(){ tos = 0; }
	bool isEmpty(){ return (tos == 0) ? true : false; }
	bool isFull(){ return (tos == MAX) ? true : false; }
	bool push(int x){
		if (!isFull()){
			a[tos++] = x;
			return true;
		}
		return false;
	}
	bool pop(int &x){
		if (!isEmpty()){
			x = a[--tos];
			return true;
		}
		return false;
	}
};

void init(){
	for (int i = 0; i < N; i++){
		visited[i] = false;
		for (int j = 0; j < N; j++)
			a[i][j] = 0;
	}
}
void dfs(int src){

	visited[src] = true;
	Stack s;
	s.push(src);
	while (!s.isEmpty()){
		int i;
		s.pop(i);
		cout << i << endl;
		for (int j = 0; j < N; j++){
			if (a[i][j] && (!visited[j]))
			{
				visited[j] = true;
				s.push(j);
			}
		}
	}
}										                  //  0--1--3
int main(){								            //  |
	cin >> N;							              //  2
	init();								              //  0 1 1 0 	
	for (int i = 0; i < N; i++){	    	//  1 0 0 1
		for (int j = 0; j < N; j++)	    	//  1 0 0 0
			cin >> a[i][j];				          //  0 1 0 0
	}
	dfs(0);								              //  0213
	return 0;
}
