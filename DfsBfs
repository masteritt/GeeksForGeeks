#include <iostream>
using namespace std;
#define MAX 5
int a[MAX][MAX];
int visited[MAX];
int N;

class Queue{
private:
	int item[MAX];
	int rear;
	int front;
public:
	Queue(){
		rear = -1;
		front = -1;
	}
	bool isFull(){
		if (rear + 1 == MAX)
			return true;
		else
			return false;
	}
	bool isEmpty() {
		if ((front == -1) || (front>rear))
			return true;
		else
			return false;
	}
	bool push(int x){
		if (!isFull()){
			item[++rear] = x;
			if (front == -1)
				front = 0;
			return true;
		}
		return false;
	}
	bool pop(int &x){
		if (!isEmpty())
		{
			x = item[front++];
			return true;
		}
		else
			return false;
	}
};
class Stack{
	int a[MAX];
	int tos;
public:
	Stack(){ tos = 0; }
	bool isEmpty(){ return (tos == 0) ? true : false; }
	bool isFull(){ return (tos == MAX) ? true : false; }
	bool push(int x){
		if (!isFull()){
			a[tos++] = x;
			return true;
		}
		return false;
	}
	bool pop(int &x){
		if (!isEmpty()){
			x = a[--tos];
			return true;
		}
		return false;
	}
};

void init(){
	for (int i = 0; i < N; i++){
		visited[i] = false;
	}
}
void bfs(int src){

	visited[src] = true;
	Queue q;
	q.push(src);
	cout << src << endl;
	while (!q.isEmpty()){
		int i;
		q.pop(i);
		for (int j = 0; j < N; j++){
			if (a[i][j] && (!visited[j]))
			{
				visited[j] = true;
				q.push(j);
				cout << j  << endl;
			}
		}
	}
}
void dfs(int src){

	visited[src] = true;
	Stack s;
	s.push(src);
	while (!s.isEmpty()){
		int i;
		s.pop(i);
		cout << i << endl;
		for (int j = 0; j < N; j++){
			if (a[i][j] && (!visited[j]))
			{
				visited[j] = true;
				s.push(j);
			}
		}
	}
}										//  0--1--3
int main(){								//  |
	cin >> N;							//  2
	init();								//  0 1 1 0 	
	for (int i = 0; i < N; i++){		//  1 0 0 1
		for (int j = 0; j < N; j++)		//  1 0 0 0
			cin>>a[i][j];				//  0 1 0 0
	}
	dfs(0);								//  0213
	init();			
	bfs(0);								//  0123
	return 0;
}
