#include <iostream>
using namespace std;
#define MAX 10
int a[MAX][MAX];
int visited[MAX];
int N;

class Stack{
	int a[MAX];
	int tos;
public:
	Stack(){ tos = 0; }
	bool isEmpty(){ return (tos == 0) ? true : false; }
	bool isFull(){ return (tos == MAX) ? true : false; }
	bool push(int x){
		if (!isFull()){
			a[tos++] = x;
			return true;
		}
		return false;
	}
	bool pop(int &x){
		if (!isEmpty()){
			x = a[--tos];
			return true;
		}
		return false;
	}
};
void init(){
	for (int i = 0; i < N; i++){
		visited[i] = false;
		for (int j = 0; j < N; j++)
			a[i][j] = 0;
	}
}
void topologicalSort(int u, Stack &stack){
	visited[u] = true;
	for (int v = 0; v< N; v++){
		if (a[u][v] && (!visited[v]))
			topologicalSort(v, stack);
	}
	stack.push(u);
}
int main(){								
	cin >> N;							
	init();									
	for (int i = 0; i < N; i++){		
		for (int j = 0; j < N; j++)		
			cin >> a[i][j];				
	}
	Stack stack;
	for (int i = 0; i < N; i++)
		if (!visited[i])
			topologicalSort(i, stack);

	while (!(stack.isEmpty()))
	{
		int i;
		stack.pop(i);
		cout << i << endl;
	}
	return 0;
}
