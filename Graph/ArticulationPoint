#include <stdio.h>
#include <iostream>

using namespace std;
#define Max 26
int N;
int a[Max][Max];
bool visited[Max];
bool ap[Max];
int parent[Max];
int disc[Max];
int low[Max];

int min(int a, int b){
	return (a < b) ? a : b;
}
void APUtil(int u){
	static int time = 0;
	int children = 0;

	visited[u] = true;
	disc[u] = low[u] = ++time;
	for (int v = 0; v < N; v++){
		if (a[u][v])
		{
			if (!visited[v]){
				children++;
				parent[v] = u;
				APUtil(v);
				low[u] = min(low[u], low[v]);

				// (1) u is root of DFS tree and has two or more chilren.
				if ((parent[u] == -1) && (children > 1))
					ap[u] = true;
      				// (2) If u is not root and low value of one of its child is more than discovery value of u.
      				if ((parent[u] != -1) && low[v] >= disc[u])
					ap[u] = true;
			}
			else if (v!=parent[u]){
				low[u] = min(low[u], disc[v]);
			}
		}
	}
}
int main()
{
	freopen("input.txt", "r", stdin);
	cin >> N;
	for (int i = 0; i < N; i++) {
		visited[i] = false;
		ap[i] = false;
		parent[i] = -1;
		for (int j = 0; j < N; j++) {
			cin >> a[i][j];
		}
	}
	for (int i = 0; i < N; i++)
		if (!visited[i])
			APUtil(i);
	for (int i = 0; i < N; i++)
		if (ap[i])
			cout << i << " ";
	cout << endl;
	return 0;
}
//5
//0 0 1 1 0
//1 0 0 0 0
//0 1 0 0 0
//0 0 0 0 1
//0 0 0 0 0//0 3
//4
//0 1 0 0
//0 0 1 0
//0 0 0 1
//0 0 0 0//1 2
