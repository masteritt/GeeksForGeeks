#include<iostream>
using namespace std;
#define Max 11
int grid[Max][Max];
int transpose[Max][Max];
bool visited[Max];
int N;

class Stack{
	int a[Max];
	int tos;
public:
	Stack(){ tos = 0; }
	bool isEmpty(){ return (tos == 0) ? true : false; }
	bool isFull(){ return (tos == Max) ? true : false; }
	bool push(int x){
		if (!isFull()){
			a[tos++] = x;
			return true;
		}
		return false;
	}
	bool pop(int &x){
		if (!isEmpty()){
			x = a[--tos];
			return true;
		}
		return false;
	}
};
void fillOrder(int v, Stack &stack)
{
	visited[v] = true;
	for (int i = 0; i < N;i++)
		if ((!visited[i]) && grid[v][i])
			fillOrder(i, stack);
	stack.push(v);
}
void DFS(int x){
	visited[x] = true;
	cout << x << " ";
	for (int y = 0; y < N; y++)
		if ((transpose[x][y]) && (!visited[y]))
			DFS(y);
}
void resetVisited(){
	for (int i = 0; i < N; i++)
		visited[i]= false;
}

void printStronglyConnected(){
	Stack stack;
	fillOrder(0, stack);

	resetVisited();
	//check with Transposed Matrix from same vertex 0
	while (!stack.isEmpty())
	{
		int v;
		stack.pop(v);

		if (!visited[v])
		{
			DFS(v);
			cout << endl;
		}
	}
}
int main(){
	freopen("input.txt", "r", stdin);
	cin >> N;
	for (int i = 0; i < N; i++)
	{
		for (int j = 0; j < N; j++)
		{
			cin >> grid[i][j];
			transpose[j][i] = grid[i][j];
		}
		visited[i] = false;
	}
	printStronglyConnected();
	return 0;
}
//5
//0 0 1 1 0
//1 0 0 0 0
//0 1 0 0 0
//0 0 0 0 1
//0 0 0 0 0
//0 1 2
//3
//4
