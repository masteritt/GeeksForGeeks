#include <iostream>

using namespace std;
#define MAX 10
#define MAX_EDGES   ((MAX *(MAX-1))/2)

int N, E;
class Edges{
public:
	int src;
	int dst;
	int weight;
};
Edges edges[MAX_EDGES];
class Subset{
public:
	int parent;
	int rank;
};

int find(int i, Subset subset[]){
	if (subset[i].parent != i)
		subset[i].parent = find(subset[i].parent, subset);
	return subset[i].parent;
}
void unionSet(int x, int y, Subset subset[]){
	int xroot = find(x, subset);
	int yroot = find(y, subset);
	if (subset[xroot].rank > subset[yroot].rank)
		subset[yroot].parent = xroot;
	else if (subset[xroot].rank < subset[yroot].rank)
		subset[xroot].parent = yroot;
	else
	{
		subset[yroot].parent = xroot;
		subset[xroot].rank++;
	}
}
void KruskalMST(){
	Subset subset[MAX];
	for (int i = 0; i < N; i++){
		subset[i].parent = i;
		subset[i].rank = 0;
	}
	Edges result[MAX];
	int e = 0, i = 0;
	while (e < (N - 1)){
		Edges next = edges[i++];
		int x = find(next.src, subset);
		int y = find(next.dst, subset);
		if (x != y){
			result[e++] = next;
			unionSet(x, y, subset);
		}
	}
	for (int i = 0; i < e; i++)
		cout << result[i].src << " " << result[i].dst << " " << result[i].weight << endl;
}
int main(){
	cin >> N >> E;
	//Reading edges in sorted order according to weight
	for (int i = 0; i < E; i++){
		cin >> edges[i].src >> edges[i].dst >> edges[i].weight;
	}
	KruskalMST();
	return 0;
}
