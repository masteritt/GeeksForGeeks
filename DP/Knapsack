#include <iostream>
using namespace std;
#define Max 101
int W, N, weights[Max], value[Max];
int dp[Max][Max];

int max(int a, int b){
	return ((a > b) ? a : b);
}
int knapsack(){
	for (int i = 0; i <= N; i++)
		for (int j = 0; j <= W; j++)
		{
			if ((i == 0) || (j == 0))
				dp[i][j] = 0;
			else if (j >= weights[i] )// max(upperVal,(upperVal->weightStepBack + currentVal)
				dp[i][j] = max(dp[i - 1][j], (value[i] + dp[i-1][j-weights[i]]));
			else
				dp[i][j] = dp[i - 1][j]; //upper value without item
		}
	return dp[N][W];
}

int main(){
	cin >> N;
	for (int i = 1; i <= N; i++)
		cin >> weights[i] >> value[i];
	cin >> W;
	cout << knapsack() << endl;
	return 0;
}
// 4
// 1 1  3 4  4 5  5 7 
// 7
// va wt  0 1 2 3 4 5 6 7
//  0  0  0 0 0 0 0 0 0 0
//  1  1  0 1 1 1 1 1 1 1
//  4  3  0 1 1 4 5 5 5 5
//  5  4  0 1 1 ^ ^ 6 6 9 
//  7  5  0 1 1 4 5 7 8 9  //9
//max(val(3) + T[0][3-3],val(1))=(4,1)=4
//max(val(3) + T[0][4-3],val(1))=(4+1,1)=5
